@implements IDisposable
@using Flycatcher.DataAccess
@using Flycatcher.Models.Database
@inject UserStateService userStateService
@inject ServerService serverService
@inject ChannelService channelService
@inject MessageService messageService
@inject IServiceScopeFactory serviceScopeFactory
@inject CallbackService callbackService


<MudText Typo="Typo.h6">
    @channelService.GetChannelName(channelId)
</MudText>


<div class="d-flex align-items-center" style="width: 100%;">
    <MudTextField @bind-Text="@messageContent" OnKeyUp="KeyUp" TextUpdateSuppression="false" Immediate="true" T="string" Label="Send Message" Variant="Variant.Outlined" AutoGrow MaxLines="4" Class="flex-grow-1 me-2" />
</div>

<div tyle="width: 100%;">
    <Virtualize Context="message" ItemsProvider="LoadMessages" @ref="virtualizeRef" OverscanCount="8">
        @if (message.Content is not null)
        {
            <MudPaper Elevation="3">
                <MudText Style="margin-left: 10px;" Typo="Typo.body1">@message.User.Username</MudText>
                <MudText Style="margin-left: 10px; margin-bottom: 10px; width: 98%; white-space: pre-wrap; word-wrap: break-word;" Typo="Typo.body2">
                    @message.Content.Replace("\r\n", "\n").Replace("\r", "\n")
                </MudText>
            </MudPaper>
        }
    </Virtualize>
</div>

@code {
    private Virtualize<Message>? virtualizeRef;
    private string messageContent = string.Empty;
    private int totalMessageCount = 0;
    private int channelId;

    private ValueTask<ItemsProviderResult<Message>> LoadMessages(ItemsProviderRequest request)
    {
        using var scope = serviceScopeFactory.CreateScope();
        using var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        QueryableRepository scopedRepo = new QueryableRepository(dbContext);
        MessageService messageService = new MessageService(scopedRepo, callbackService);
        var messages = messageService.GetChannelMessages(channelId, request.StartIndex, request.Count);
        return new ValueTask<ItemsProviderResult<Message>>(new ItemsProviderResult<Message>(messages, messageService.GetChannelMessagesCount((int)userStateService.selectedChannelId!)));
    }

    protected override void OnInitialized()
    {
        channelId = (int)userStateService.selectedChannelId!;

        using var scope = serviceScopeFactory.CreateScope();
        using var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var queryable = dbContext.Messages.AsQueryable();
        var totalMessageCount = queryable.Count();

        callbackService.Subscribe(CallbackType.Channel, channelId, GetNewMessagesAsync);
    }

    private async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(messageContent.Trim()))
        {
            messageContent = string.Empty;
            return;
        }

        await messageService.CreateMessage((int)userStateService.loggedInUserId!, channelId, messageContent.Trim());
        messageContent = string.Empty;

        StateHasChanged();
    }


    private async Task GetNewMessagesAsync()
    {
        if (virtualizeRef != null)
        {
            await virtualizeRef.RefreshDataAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        callbackService.Unsubscribe(CallbackType.Channel, channelId, GetNewMessagesAsync);
    }
}