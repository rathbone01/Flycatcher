@implements IDisposable
@using Flycatcher.Data
@inject UserStateService userStateService
@inject ServerService serverService
@inject ChannelService channelService
@inject MessageService messageService
@inject IServiceScopeFactory serviceScopeFactory

<MudText Typo="Typo.h6">
    @channelService.GetChannelName((int)userStateService.selectedChannelId!)
</MudText>


<div class="d-flex align-items-center" style="width: 100%;">
    <MudTextField @bind-Text="@messageContent" OnKeyUp="KeyUp" TextUpdateSuppression="false" Immediate="true" T="string" Label="Send Message" Variant="Variant.Outlined" AutoGrow MaxLines="4" Class="flex-grow-1 me-2" />
</div>

@foreach (var message in messageService.GetChannelMessages((int)userStateService.selectedChannelId!, 0))
{
    <MudPaper Elevation="3">
        <MudText Style="margin-left: 10px;" Typo="Typo.body1">@message.User.Username</MudText>
        <MudText Style="margin-left: 10px; margin-bottom: 6px;" Typo="Typo.body2">@message.Content</MudText>
    </MudPaper>
}

@code {
    private string messageContent = string.Empty;
    System.Timers.Timer timer = new System.Timers.Timer(1000);
    private int messageCount = 0;

    protected override void OnInitialized()
    {
        timer.Elapsed += CheckForNewMessages!;
        timer.Start();
    }

    private async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.ShiftKey == false)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(messageContent))
            return;

        await messageService.CreateMessage((int)userStateService.loggedInUserId!, (int)userStateService.selectedChannelId!, messageContent);
        messageContent = string.Empty;
        StateHasChanged();
    }

    private void CheckForNewMessages(object sender, System.Timers.ElapsedEventArgs e)
    {
        using var scope = serviceScopeFactory.CreateScope();
        using var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var queryable = dbContext.Messages.AsQueryable();

        var newMessageCount = queryable.Count();
        if (newMessageCount == messageCount)
            return;

        messageCount = newMessageCount;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer.Stop();
        timer.Dispose();
    }
}