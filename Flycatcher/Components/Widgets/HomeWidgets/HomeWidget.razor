@implements IDisposable
@using Flycatcher.Components.Widgets.HomeWidgets.SiteAdminWidgets
@inject UserStateService userStateService
@inject UserService userService
@inject ServerInviteService serverInviteService
@inject CallbackService callbackService

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudTabs Outlined="true">
            <MudTabPanel Text="Friends">
                <FriendsWidget />
            </MudTabPanel>
            <MudTabPanel Text="@RequestsText()">
                <RequestsWidget />
            </MudTabPanel>
            <MudTabPanel Text="Add a Friend">
                <AddAFriendWidget />
            </MudTabPanel>
            @if (isSiteAdmin)
            {
                <MudTabPanel Text="Site Admin">
                    <SiteAdminWidget/>
                </MudTabPanel>
            }
        </MudTabs>
    </MudContainer>
</MudMainContent>

@code {
    private int loggedInUserId;
    private bool isSiteAdmin = false;

    protected async override Task OnInitializedAsync()
    {
        loggedInUserId = (int)userStateService.loggedInUserId!;
        callbackService.Subscribe(CallbackType.User, loggedInUserId, UserHasUpdatedAsync);

        if (userStateService.loggedInUserId is not null)
        {
            isSiteAdmin = await userService.IsUserSiteAdmin((int)userStateService.loggedInUserId!);
        }
    }

    private string RequestsText()
    {
        int inviteCountTotal = 0;
        inviteCountTotal += userService.GetFriendRequestsCount((int)userStateService.loggedInUserId!);
        inviteCountTotal += serverInviteService.GetServerInvitesCount((int)userStateService.loggedInUserId!);

        if (inviteCountTotal > 0)
        {
            return $"Requests ({inviteCountTotal})";
        }

        return "Requests";
    }

    private async Task UserHasUpdatedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        callbackService.Unsubscribe(CallbackType.User, loggedInUserId, UserHasUpdatedAsync);
    }
}
