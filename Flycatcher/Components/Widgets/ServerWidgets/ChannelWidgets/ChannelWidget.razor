@implements IDisposable
@using Flycatcher.DataAccess
@using Flycatcher.Models.Database
@inject UserStateService userStateService
@inject ServerService serverService
@inject ChannelService channelService
@inject MessageService messageService
@inject IServiceScopeFactory serviceScopeFactory
@inject CallbackService callbackService
@inject ContextFactory contextFactory


<MudText Typo="Typo.h6">
    @channelName
</MudText>

<div class="d-flex align-items-center" style="width: 100%;">
    <MudTextField @bind-Text="@messageContent" OnKeyUp="KeyUp" TextUpdateSuppression="false" Immediate="true" T="string" Label="Send Message" Variant="Variant.Outlined" AutoGrow MaxLines="4" Class="flex-grow-1 me-2" />
    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
        <MudFab OnClick="SendMessage" Style="margin-top: 12px;" Color="Color.Secondary" StartIcon="@Icons.Material.Rounded.Send" Size="Size.Medium" />
    </MudHidden>
</div>

<div tyle="width: 100%;">
    <Virtualize Context="message" ItemsProvider="LoadMessagesAsync" @ref="virtualizeRef" OverscanCount="8">
        <MessageWidget Message="message" />
    </Virtualize>
</div>

@code {
    private Virtualize<Message>? virtualizeRef;
    private string messageContent = string.Empty;
    private int totalMessageCount = 0;
    private int channelId;
    private string channelName = string.Empty;

    private async ValueTask<ItemsProviderResult<Message>> LoadMessagesAsync(ItemsProviderRequest request)
    {
        using var scope = serviceScopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ContextFactory>();
        var context = contextFactory.CreateDbContext();

        QueryableRepository<Message> scopedRepo = new QueryableRepository<Message>(dbContext);
        MessageService messageService = new MessageService(scopedRepo, callbackService);

        var messages = await messageService.GetChannelMessages(channelId, request.StartIndex, request.Count);
        var count = await messageService.GetChannelMessagesCount((int)userStateService.selectedChannelId!);

        return new ItemsProviderResult<Message>(messages, count);
    }

    protected override async Task OnInitializedAsync()
    {
        channelId = (int)userStateService.selectedChannelId!;

        using var scope = serviceScopeFactory.CreateScope();
        var contextFactory = scope.ServiceProvider.GetRequiredService<ContextFactory>();
        var dbContext = contextFactory.CreateDbContext();
        var queryable = dbContext.Messages.AsQueryable();
        channelName = await channelService.GetChannelName(channelId);
        callbackService.Subscribe(CallbackType.ChannelMessageEvent, channelId, GetNewMessagesAsync);
    }

    private async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(messageContent.Trim()))
        {
            messageContent = string.Empty;
            return;
        }

        await messageService.CreateMessage((int)userStateService.loggedInUserId!, channelId, messageContent.Trim());
        messageContent = string.Empty;

        StateHasChanged();
    }


    private async Task GetNewMessagesAsync()
    {
        if (virtualizeRef != null)
        {
            await virtualizeRef.RefreshDataAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        callbackService.Unsubscribe(CallbackType.ChannelMessageEvent, channelId, GetNewMessagesAsync);
    }
}