@implements IDisposable
@inject ServerService serverService
@inject UserService userService
@inject UserStateService userStateService
@inject CallbackService callbackService
@inject FriendRequestService friendRequestService


<div style="justify-content: center; text-align: center;">
    <MudText Typo="Typo.h6">Users</MudText>
</div>
<MudList ReadOnly="true" T="string">
    @foreach (var user in serverUsers)
    {
        <div style="display: flex; justify-content: center; margin-bottom: 1em;">
            <MudPaper Style="width: 90%;" Outlined="true">
                @if (user.Id == serverOwnerId)
                {
                    <MudListItem OnClick="() => SelectUser(user.Id)" Icon="@Icons.Material.Filled.Star" Text="@user.Username" />
                }
                else
                {
                    <MudListItem OnClick="() => SelectUser(user.Id)" Text="@user.Username" />
                }

                @if (selectedUserId == user.Id)
                {
                    
                    <MudPopover Open="true" Class="pa-4" Fixed="true" RelativeWidth="DropdownWidth.Ignore" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight">
                        <MudOverlay OnClosed="() => SelectUser(null)" Visible="true"  AutoClose="true" />
                        
                        <MudText Typo="Typo.body1">@user.Username</MudText>

                        @if (user.Id == userStateService.loggedInUserId)
                        {
                            <MudText Typo="Typo.body2">The selected user is you.</MudText>
                        }
                        else if (selectedUserIsFriend)
                        {
                            <MudText Color="Color.Success" Typo="Typo.body2">You are already friends.</MudText>
                        }
                        else if (selectedUserHasPendingRequest)
                        {
                            <MudText Color="Color.Success" Typo="Typo.body2">This user is pending a friend request.</MudText>
                        }
                        else
                        {
                            <MudButton Color="Color.Success" OnClick="CreateFriendRequest">Add Friend</MudButton>
                        }
                    </MudPopover>
                }
            </MudPaper>
        </div>
    }
</MudList>

@code {
    private int serverOwnerId;
    private int serverId;
    private List<User> serverUsers = new List<User>();
    private int? selectedUserId = null;
    private bool selectedUserIsFriend = false;
    private bool selectedUserHasPendingRequest = false;

    private async Task SelectUser(int? userId)
    {
        selectedUserId = userId;
        if (selectedUserId is null)
            return;

        selectedUserIsFriend = await userService.AreUsersFriends((int)selectedUserId!, (int)userStateService.loggedInUserId!);
        selectedUserHasPendingRequest = await friendRequestService.IsFriendRequestPendingToOtherUser((int)userStateService.loggedInUserId!, (int)selectedUserId!);

        StateHasChanged();
    }

    private async Task CreateFriendRequest()
    {
        if (selectedUserId is null)
            return;

        var result = await friendRequestService.CreateFriendRequest((int)userStateService.loggedInUserId!, (int)selectedUserId!);
        if (result.Success)
        {
            selectedUserHasPendingRequest = true;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        serverId = (int)userStateService.selectedServerId!;
        serverOwnerId = await serverService.GetServerOwnerUserId(serverId);
        serverUsers = await serverService.GetServerUsers(serverId);

        callbackService.Subscribe(CallbackType.ServerUserUpdated, serverId, ServerUsersHaveUpdatedAsync);
    }

    private async Task ServerUsersHaveUpdatedAsync()
    {
        serverUsers = await serverService.GetServerUsers(serverId);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        callbackService.Unsubscribe(CallbackType.ServerUserUpdated, serverId, ServerUsersHaveUpdatedAsync);
    }
}
