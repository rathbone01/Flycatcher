@implements IDisposable
@inject UserStateService userStateService
@inject ServerService serverService
@inject UserService userService
@inject ChannelService channelService
@inject MessageService messageService
@inject ServerInviteService serverInviteService
@inject IDialogService dialogService
@inject IBrowserViewportService browserViewportService
@inject CallbackService callbackService

@if (userStateService.selectedServerId is null || !(serverService.DoesServerExist((int)userStateService.selectedServerId!)))
{
    userStateService.selectedServerId = null;
    userStateService.selectedChannelId = null;
    return;
}

<MudDrawer Open="leftDrawerOpen" OpenChanged="LeftDrawerOpenChanged" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Responsive">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">@serverService.GetServerName((int)userStateService.selectedServerId!)</MudText>
        @if ((int)userStateService.loggedInUserId! == serverOwnerId)
        {
            <MudMenu Icon="@Icons.Material.Filled.Settings"
                     Color="Color.Primary"
                     AriaLabel="Open user menu">
                <MudMenuItem OnClick="InviteUser" Label="Invite User" />
                <MudMenuItem OnClick="DeleteServer" Label="Delete Server" />
            </MudMenu>
        }
    </MudDrawerHeader>
    <MudNavMenu Style="display: flex; flex-direction: column;">
        @if ((int)userStateService.loggedInUserId! == serverOwnerId)
        {
            <div style="justify-content: center; text-align: center;">
                <MudButton Style="width: 70%;" Variant="Variant.Filled" OnClick="CreateChannel">Create Channel</MudButton>
                <br />
                <br />
            </div>
        }
        @foreach (var channel in serverService.GetServerChannels((int)userStateService.selectedServerId!))
        {
            @if (channel.Id == userStateService.selectedChannelId)
            {
                <MudButton Color="Color.Primary" Variant="Variant.Text">@channel.Name</MudButton>
                continue;
            }

            <MudButton Variant="Variant.Text" OnClick="() => SelectChannel(channel.Id)">@channel.Name</MudButton>
        }
    </MudNavMenu>
</MudDrawer>
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudHidden Breakpoint="Breakpoint.SmAndDown" HiddenChanged="OnHiddenChanged" Invert="true">
            <br />
            <MudButton OnClick="ToggleLeftDrawer" Variant="Variant.Outlined">
                <MudIcon Icon="@Icons.Material.Filled.Menu" />
                <MudText Typo="Typo.button">&nbsp;Sidebar</MudText>
            </MudButton>
            <br />
            <br />
        </MudHidden>
        @if (userStateService.selectedChannelId is not null)
        {
            <ChannelWidget @key=userStateService.selectedChannelId />
        }
    </MudContainer>
</MudMainContent>

<MudDrawer Open="rightDrawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right" Variant="DrawerVariant.Persistent">
    <div style="justify-content: center; text-align: center;">
        <MudText Typo="Typo.h6">Users</MudText>
    </div>
    <MudList ReadOnly="true" T="string">
        @foreach (var user in serverService.GetServerUsers((int)userStateService.selectedServerId!))
        {
            if (user.Id == serverOwnerId)
            {
                <MudListItem Icon="@Icons.Material.Filled.Star" Text="@user.Username" />
                continue;
            }
            <MudListItem Text="@user.Username" />
        }
    </MudList>
</MudDrawer>

@code {
    private string messageContent = string.Empty;
    private int serverOwnerId;
    private bool leftDrawerOpen = false;
    private bool rightDrawerOpen = false;
    private int serverId;

    [Parameter]
    public Action? ServerDeletedCallback { get; set; }

    protected override void OnInitialized()
    {
        serverId = (int)userStateService.selectedServerId!;
        serverOwnerId = serverService.GetServerOwnerUserId(serverId);

        callbackService.Subscribe(CallbackType.Server, serverId, ServerHasUpdatedAsync);
    }

    private void OnHiddenChanged(bool isLargeScreen)
    {
        leftDrawerOpen = isLargeScreen;
        rightDrawerOpen = isLargeScreen;

        StateHasChanged();
    }

    private void LeftDrawerOpenChanged(bool isOpen)
    {
        leftDrawerOpen = isOpen;
    }

    private void ToggleLeftDrawer()
    {
        leftDrawerOpen = !leftDrawerOpen;
    }

    //on parameter set override
    protected override async Task OnParametersSetAsync()
    {
        var browserViewport = await browserViewportService.GetCurrentBrowserWindowSizeAsync();
        if (browserViewport.Width >= 960)
        {
            leftDrawerOpen = true;
            rightDrawerOpen = true;
        }

        // Select first channel if none is selected
        if (userStateService.selectedChannelId is null)
        {
            var channels = serverService.GetServerChannels((int)userStateService.selectedServerId!);
            if (channels.Count > 0)
            {
                userStateService.selectedChannelId = channels[0].Id;
            }
        }
    }

    private async Task SelectChannel(int channelId)
    {
        userStateService.selectedChannelId = channelId;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateChannel()
    {
        var channelName = await ShowChannelCreationDialog();
        if (channelName is null)
            return;

        await channelService.CreateChannel(channelName, (int)userStateService.selectedServerId!);
        await InvokeAsync(StateHasChanged);
    }

    public async Task<string?> ShowChannelCreationDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Title", "Choose Channel Name");
        parameters.Add("Message", "Please select a name for your new Channel.");

        var dialog = await dialogService.ShowAsync<StringDialog>("Create Channel", parameters);
        var result = await dialog.Result;

        return (string?)result?.Data ?? null;
    }

    private async Task DeleteServer()
    {
        if (await ConfirmServerDelete())
        {
            await serverService.DeleteServer((int)userStateService.selectedServerId!);
            ServerDeletedCallback?.Invoke();
        }
    }

    private async Task<bool> ConfirmServerDelete()
    {
        var parameters = new DialogParameters();
        parameters.Add("Title", "Delete Server");
        parameters.Add("Message", "Are you sure you want to delete this server?");
        parameters.Add("ItemName", serverService.GetServerName((int)userStateService.selectedServerId!));

        var dialog = await dialogService.ShowAsync<DeleteDialog>("Delete Server", parameters);
        var result = await dialog.Result;

        if (result is not null && result.Data is not null)
        {
            return (bool)result.Data;
        }

        return false;
    }

    private async Task InviteUser()
    {
        var username = await ShowInviteCreationDialog();
        if (username is null)
            return;

        var recipent = userService.GetUser(username);
        if (recipent is null)
        {
            await dialogService.ShowMessageBox("User not found", "The user you're trying to invite does not exist.");
            return;
        }

        await serverInviteService.CreateInvite((int)userStateService.selectedServerId!, recipent.Id, (int)userStateService.loggedInUserId!);
        await dialogService.ShowMessageBox("Invite Sent", "The invite has been sent to the user.");
        StateHasChanged();
    }

    public async Task<string?> ShowInviteCreationDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Title", "Invite to server");
        parameters.Add("Message", "Please enter the Username of the User you'd like to invite.");

        var dialog = await dialogService.ShowAsync<StringDialog>("Send Invite", parameters);
        var result = await dialog.Result;

        return (string?)result?.Data ?? null;
    }

    public async Task ServerHasUpdatedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        callbackService.Unsubscribe(CallbackType.Server, serverId, ServerHasUpdatedAsync);
    }
}